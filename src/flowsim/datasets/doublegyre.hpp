#pragma once
//--------------------------------------------------------------------------//
#include "../flow.hpp"
//--------------------------------------------------------------------------//
namespace dst::flowsim
{
  //--------------------------------------------------------------------------//
  class DoubleGyre3D : public Flow<3>
  //--------------------------------------------------------------------------//
  {
  public:
    //--------------------------------------------------------------------------//
    DoubleGyre3D();
    //--------------------------------------------------------------------------//
    DoubleGyre3D(const Domain<3> &space_domain_used);
    //--------------------------------------------------------------------------//
    virtual ~DoubleGyre3D() {}
    //--------------------------------------------------------------------------//
    virtual MaybeVec<3> v(const VecR<3> &pos, real t) const override;
    //--------------------------------------------------------------------------//
    /**Parameters must be stored in the order: A, omega, eps.*/
    void setParameters(real A, real omega, real eps);
    //--------------------------------------------------------------------------//
  protected:
    //--------------------------------------------------------------------------//
    // standard parameters for the DoubleGyre3D
    real m_A = 0.1;
    real m_omega = 2.0 * M_PI / 10.0;
    real m_eps = 0.25;
    //--------------------------------------------------------------------------//
  };
  //--------------------------------------------------------------------------//
  class DoubleGyre2D : public Flow<2>
  //--------------------------------------------------------------------------//
  {
  public:
    //--------------------------------------------------------------------------//
    DoubleGyre2D();
    //--------------------------------------------------------------------------//
    DoubleGyre2D(const Domain<2> &space_domain_used);
    //--------------------------------------------------------------------------//
    virtual ~DoubleGyre2D() {}
    //--------------------------------------------------------------------------//
    virtual MaybeVec<2> v(const VecR<2> &pos, real t) const override;
    //--------------------------------------------------------------------------//
    /**Parameters must be stored in the order: A, omega, eps.*/
    void setParameters(real A, real omega, real eps);
    //--------------------------------------------------------------------------//
  protected:
    //--------------------------------------------------------------------------//
    // standard parameters for the DoubleGyre2D
    real m_A = 0.1;
    real m_omega = 2.0 * M_PI / 10.0;
    real m_eps = 0.25;
    //--------------------------------------------------------------------------//
  };
  //--------------------------------------------------------------------------//
}
//--------------------------------------------------------------------------//